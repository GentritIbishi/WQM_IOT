{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SensorDataService {\n  http;\n  baseUrl = 'http://localhost:8080/api/sensors';\n  constructor(http) {\n    this.http = http;\n  }\n  getSensorData() {\n    return this.http.get(`${this.baseUrl}`);\n  }\n  getLatestSensorData() {\n    return this.http.get(`${this.baseUrl}/latest/distinct`);\n  }\n  getSensorDataByPrediction(prediction) {\n    return this.http.get(`${this.baseUrl}/byPrediction?prediction=${prediction}`);\n  }\n  getSensorDataByLocation(latitude, longitude) {\n    return this.http.get(`${this.baseUrl}/byLocation?latitude=${latitude}&longitude=${longitude}`);\n  }\n  static ɵfac = function SensorDataService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || SensorDataService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SensorDataService,\n    factory: SensorDataService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["SensorDataService","http","baseUrl","constructor","getSensorData","get","getLatestSensorData","getSensorDataByPrediction","prediction","getSensorDataByLocation","latitude","longitude","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/gentritibishi/IdeaProjects/WQM_IOT/src/app/services/sensor-data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nexport interface SensorData {\n  id: string;             // UUID of the sensor data\n  temperature: string;    // Temperature as a string (or number, depending on your backend)\n  ph: number;             // pH value as a number\n  flow: number;           // Flow information as a string (e.g., \"High flow\", \"Low flow\")\n  turbidity: number;      // Turbidity as a number\n  latitude: number;       // Latitude of the sensor location\n  longitude: number;      // Longitude of the sensor location\n  address: string;      // Longitude of the sensor location\n  timestamp: string;      // Timestamp as a string (use a Date object if you parse it)\n  prediction: number;      // Prediction as a string (use a Date object if you parse it)\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SensorDataService {\n  private baseUrl = 'http://localhost:8080/api/sensors';\n\n  constructor(private http: HttpClient) {}\n\n  getSensorData(): Observable<SensorData[]> {\n    return this.http.get<SensorData[]>(`${this.baseUrl}`);\n  }\n\n  getLatestSensorData(): Observable<SensorData[]> {\n    return this.http.get<SensorData[]>(`${this.baseUrl}/latest/distinct`);\n  }\n\n  getSensorDataByPrediction(prediction: number): Observable<SensorData[]> {\n    return this.http.get<SensorData[]>(`${this.baseUrl}/byPrediction?prediction=${prediction}`);\n  }\n\n  getSensorDataByLocation(latitude: number, longitude: number): Observable<SensorData[]> {\n    return this.http.get<SensorData[]>(`${this.baseUrl}/byLocation?latitude=${latitude}&longitude=${longitude}`);\n  }\n\n}\n"],"mappings":";;AAqBA,OAAM,MAAOA,iBAAiB;EAGRC,IAAA;EAFZC,OAAO,GAAG,mCAAmC;EAErDC,YAAoBF,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEvCG,aAAaA,CAAA;IACX,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAe,GAAG,IAAI,CAACH,OAAO,EAAE,CAAC;EACvD;EAEAI,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACL,IAAI,CAACI,GAAG,CAAe,GAAG,IAAI,CAACH,OAAO,kBAAkB,CAAC;EACvE;EAEAK,yBAAyBA,CAACC,UAAkB;IAC1C,OAAO,IAAI,CAACP,IAAI,CAACI,GAAG,CAAe,GAAG,IAAI,CAACH,OAAO,4BAA4BM,UAAU,EAAE,CAAC;EAC7F;EAEAC,uBAAuBA,CAACC,QAAgB,EAAEC,SAAiB;IACzD,OAAO,IAAI,CAACV,IAAI,CAACI,GAAG,CAAe,GAAG,IAAI,CAACH,OAAO,wBAAwBQ,QAAQ,cAAcC,SAAS,EAAE,CAAC;EAC9G;;qCAnBWX,iBAAiB,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;;WAAjBf,iBAAiB;IAAAgB,OAAA,EAAjBhB,iBAAiB,CAAAiB,IAAA;IAAAC,UAAA,EAFhB;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}