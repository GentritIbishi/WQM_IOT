{"ast":null,"code":"import { Stomp } from '@stomp/stompjs';\nimport * as SockJS from 'sockjs-client';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class WebSocketService {\n  stompClient;\n  messageSubject = new Subject();\n  constructor() {\n    this.connect();\n  }\n  connect() {\n    const socket = new SockJS('http://localhost:8080/notifications'); // Use SockJS endpoint\n    this.stompClient = Stomp.over(socket);\n    this.stompClient.connect({}, frame => {\n      console.log('Connected: ' + frame);\n      // Subscribe to the topic you are using in the backend\n      this.stompClient.subscribe('/topic/anomalies', message => {\n        this.messageSubject.next(JSON.parse(message.body));\n      });\n    }, error => {\n      console.error('WebSocket connection error:', error);\n    });\n  }\n  // Expose the observable to subscribe to messages\n  get messages$() {\n    return this.messageSubject.asObservable();\n  }\n  static ɵfac = function WebSocketService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || WebSocketService)();\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WebSocketService,\n    factory: WebSocketService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["Stomp","SockJS","Subject","WebSocketService","stompClient","messageSubject","constructor","connect","socket","over","frame","console","log","subscribe","message","next","JSON","parse","body","error","messages$","asObservable","factory","ɵfac","providedIn"],"sources":["/Users/gentritibishi/IdeaProjects/WQM_IOT/src/app/services/web-socket.service.ts"],"sourcesContent":["// web-socket.service.ts\nimport { Injectable } from '@angular/core';\nimport { Stomp } from '@stomp/stompjs';\nimport * as SockJS from 'sockjs-client';\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebSocketService {\n  private stompClient: any;\n  private messageSubject: Subject<any> = new Subject<any>();\n\n  constructor() {\n    this.connect();\n  }\n\n  private connect() {\n    const socket = new SockJS('http://localhost:8080/notifications'); // Use SockJS endpoint\n    this.stompClient = Stomp.over(socket);\n\n    this.stompClient.connect({}, (frame: any) => {\n      console.log('Connected: ' + frame);\n\n      // Subscribe to the topic you are using in the backend\n      this.stompClient.subscribe('/topic/anomalies', (message: any) => {\n        this.messageSubject.next(JSON.parse(message.body));\n      });\n    }, (error: any) => {\n      console.error('WebSocket connection error:', error);\n    });\n  }\n\n  // Expose the observable to subscribe to messages\n  get messages$(): Observable<any> {\n    return this.messageSubject.asObservable();\n  }\n}\n"],"mappings":"AAEA,SAASA,KAAK,QAAQ,gBAAgB;AACtC,OAAO,KAAKC,MAAM,MAAM,eAAe;AACvC,SAAqBC,OAAO,QAAQ,MAAM;;AAK1C,OAAM,MAAOC,gBAAgB;EACnBC,WAAW;EACXC,cAAc,GAAiB,IAAIH,OAAO,EAAO;EAEzDI,YAAA;IACE,IAAI,CAACC,OAAO,EAAE;EAChB;EAEQA,OAAOA,CAAA;IACb,MAAMC,MAAM,GAAG,IAAIP,MAAM,CAAC,qCAAqC,CAAC,CAAC,CAAC;IAClE,IAAI,CAACG,WAAW,GAAGJ,KAAK,CAACS,IAAI,CAACD,MAAM,CAAC;IAErC,IAAI,CAACJ,WAAW,CAACG,OAAO,CAAC,EAAE,EAAGG,KAAU,IAAI;MAC1CC,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGF,KAAK,CAAC;MAElC;MACA,IAAI,CAACN,WAAW,CAACS,SAAS,CAAC,kBAAkB,EAAGC,OAAY,IAAI;QAC9D,IAAI,CAACT,cAAc,CAACU,IAAI,CAACC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC,CAAC;MACpD,CAAC,CAAC;IACJ,CAAC,EAAGC,KAAU,IAAI;MAChBR,OAAO,CAACQ,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD,CAAC,CAAC;EACJ;EAEA;EACA,IAAIC,SAASA,CAAA;IACX,OAAO,IAAI,CAACf,cAAc,CAACgB,YAAY,EAAE;EAC3C;;qCA3BWlB,gBAAgB;EAAA;;WAAhBA,gBAAgB;IAAAmB,OAAA,EAAhBnB,gBAAgB,CAAAoB,IAAA;IAAAC,UAAA,EAFf;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}